{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ticketSample } from \"../../constants/mocks\";\nimport { OPEN_QRCODE_MODAL, CLOSE_QRCODE_MODAL } from \"../ticket/ticketType\";\nvar initialState = {\n  tickets: ticketSample,\n  showQRCodeModal: false,\n  qrCodeData: null\n};\n\nvar ticketReducer = function ticketReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case OPEN_QRCODE_MODAL:\n      return _objectSpread({}, state, {\n        showQRCodeModal: true,\n        qrCodeData: action.payload\n      });\n\n    case CLOSE_QRCODE_MODAL:\n      return _objectSpread({}, state, {\n        showQRCodeModal: false,\n        qrCodeData: null\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default ticketReducer;","map":{"version":3,"sources":["/Users/muhammadtaimoor/Projects/rn-onlineticket/redux/ticket/ticketReducer.js"],"names":["ticketSample","OPEN_QRCODE_MODAL","CLOSE_QRCODE_MODAL","initialState","tickets","showQRCodeModal","qrCodeData","ticketReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,YAAT;AACA,SACIC,iBADJ,EAEIC,kBAFJ;AAKA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAEJ,YADQ;AAEjBK,EAAAA,eAAe,EAAE,KAFA;AAGjBC,EAAAA,UAAU,EAAE;AAHK,CAArB;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAmC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,iBAAL;AACI,+BACOO,KADP;AAEIH,QAAAA,eAAe,EAAE,IAFrB;AAGIC,QAAAA,UAAU,EAAEG,MAAM,CAACE;AAHvB;;AAKJ,SAAKT,kBAAL;AACI,+BACOM,KADP;AAEIH,QAAAA,eAAe,EAAE,KAFrB;AAGIC,QAAAA,UAAU,EAAE;AAHhB;;AAKJ;AACI,aAAOE,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,eAAeD,aAAf","sourcesContent":["import { ticketSample } from '../../constants/mocks';\nimport {\n    OPEN_QRCODE_MODAL,\n    CLOSE_QRCODE_MODAL\n} from '../ticket/ticketType';\n\nconst initialState = {\n    tickets: ticketSample,\n    showQRCodeModal: false,\n    qrCodeData: null\n}\n\nconst ticketReducer = ( state = initialState, action) => {\n    switch(action.type){\n        case OPEN_QRCODE_MODAL:\n            return {\n                ...state,\n                showQRCodeModal: true,\n                qrCodeData: action.payload\n            }\n        case CLOSE_QRCODE_MODAL:\n            return{\n                ...state,\n                showQRCodeModal: false,\n                qrCodeData: null\n            }\n        default: \n            return state;\n    }\n}\n\nexport default ticketReducer;"]},"metadata":{},"sourceType":"module"}