{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/muhammadtaimoor/Projects/adappt/UI/scanQRScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Permissions from 'expo-permissions';\nimport axios from 'axios';\nimport * as LocalAuthentication from 'expo-local-authentication';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { retreiveAccountInformation } from \"../schema\";\nimport { retreiveEthereumAddress } from \"../schema\";\nimport { addIssuedClaims } from \"../schema\";\nimport { retreivePersonalInformation } from \"../schema\";\nimport { retrieveCityClaim } from \"../schema\";\nimport { checkClaimExistance } from \"../schema\";\nimport { retreiveClaims } from \"../schema\";\nimport { deleteClaims } from \"../schema\";\nimport * as Urls from \"../baseUrl.json\";\nvar axiosObj = axios.create({\n  baseURL: \"http://\" + Urls.baseUrl\n});\nvar verifierRoute = axios.create({\n  baseURL: \"http://\" + Urls.verifierUrl\n});\n\nvar ScanScreen = function (_React$Component) {\n  _inherits(ScanScreen, _React$Component);\n\n  var _super = _createSuper(ScanScreen);\n\n  function ScanScreen() {\n    var _this;\n\n    _classCallCheck(this, ScanScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      hasCameraPermission: null,\n      scanned: false\n    };\n\n    _this.getPermissionsAsync = function _callee() {\n      var _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              _this.setState({\n                hasCameraPermission: status === 'granted'\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(ScanScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.getPermissionsAsync();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          hasCameraPermission = _this$state.hasCameraPermission,\n          scanned = _this$state.scanned;\n      var navigation = this.props.navigation;\n\n      handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n        var type = _ref.type,\n            data = _ref.data;\n\n        _this2.setState({\n          scanned: true\n        });\n\n        if (JSON.parse(data).type == 'claimsQR') {\n          var userAuthentication = LocalAuthentication.authenticateAsync({\n            promptMessage: \"Claim Request\",\n            cancelLabel: \"Cancel\",\n            fallbackLabel: \"Use Pin\"\n          });\n          Promise.resolve(userAuthentication).then(function (onTouch) {\n            if (onTouch.success == true) {\n              retreiveAccountInformation().then(function (value) {\n                retreiveEthereumAddress().then(function (EthereumId) {\n                  console.log(\"Sent Username for Claim Scan:\", value.email);\n\n                  if (JSON.parse(data).claimName == \"Claim City\") {\n                    var cityClaimAuthentication = LocalAuthentication.authenticateAsync({\n                      promptMessage: \"Your Name, Email, Country and Phone will be shared for this claim\",\n                      cancelLabel: \"Cancel\",\n                      fallbackLabel: \"Use Pin\"\n                    });\n                    cityClaimAuthentication.then(function (onTrue) {\n                      if (onTrue.success == true) {\n                        retreivePersonalInformation().then(function (result) {\n                          axiosObj.post('/identity/issueClaim', {\n                            qr: data,\n                            country: result.country,\n                            email: result.email,\n                            name: result.name,\n                            phone: result.phone,\n                            username: value.email,\n                            claimer: EthereumId.address\n                          }, {\n                            timeout: 2000\n                          }).then(function (response) {\n                            var claimData = {\n                              claimId: response.data.claimId,\n                              claimName: response.data.claimName,\n                              issuer: response.data.issuer,\n                              data: response.data.data,\n                              uri: response.data.uri,\n                              issuerName: response.data.issuerName\n                            };\n                            checkClaimExistance(claimData.claimId).then(function (claimExist) {\n                              if (claimExist.length == 0) {\n                                addIssuedClaims(claimData.claimId, claimData.claimName, claimData.data, claimData.issuer, claimData.uri, claimData.issuerName);\n                                navigation.navigate(\"Claims\");\n                              } else {\n                                try {\n                                  Alert.alert(\"Claim Scan\", \"You already have this credential\")[({\n                                    text: \"Cancel\",\n                                    onPress: function onPress() {\n                                      return console.log(\"Cancel Pressed\");\n                                    },\n                                    style: \"cancel\"\n                                  }, {\n                                    text: \"OK\"\n                                  })], {\n                                    cancelable: \"false\"\n                                  };\n                                } catch (error) {\n                                  return;\n                                }\n\n                                navigation.navigate(\"Claims\");\n                              }\n                            });\n                          }).catch(function (error) {\n                            if (error) {\n                              Alert.alert(\"Claim Scan\", \"Error while fetching claim. Do not leave your name, email, country and phone empty\")[({\n                                text: \"Cancel\",\n                                onPress: function onPress() {\n                                  return console.log(\"Cancel Pressed\");\n                                },\n                                style: \"cancel\"\n                              }, {\n                                text: \"OK\"\n                              })], {\n                                cancelable: \"false\"\n                              };\n                            }\n                          });\n                        });\n                      }\n                    });\n                  } else {\n                    axiosObj.post('/identity/issueClaim', {\n                      qr: data,\n                      email: value.email,\n                      claimer: EthereumId.address\n                    }, {\n                      timeout: 3000\n                    }).then(function (response) {\n                      var claimData = {\n                        claimId: response.data.claimId,\n                        claimName: response.data.claimName,\n                        issuer: response.data.issuer,\n                        data: response.data.data,\n                        uri: response.data.uri,\n                        issuerName: response.data.issuerName\n                      };\n                      checkClaimExistance(claimData.claimId).then(function (claimExist) {\n                        if (claimExist.length == 0) {\n                          addIssuedClaims(claimData.claimId, claimData.claimName, claimData.data, claimData.issuer, claimData.uri, claimData.issuerName);\n                          navigation.navigate(\"Claims\");\n                        } else {\n                          try {\n                            Alert.alert(\"Claim Scan\", \"You already have this credential\")[({\n                              text: \"Cancel\",\n                              onPress: function onPress() {\n                                return console.log(\"Cancel Pressed\");\n                              },\n                              style: \"cancel\"\n                            }, {\n                              text: \"OK\"\n                            })], {\n                              cancelable: \"false\"\n                            };\n                          } catch (error) {\n                            return;\n                          }\n\n                          navigation.navigate(\"Claims\");\n                        }\n                      });\n                    }).catch(function (error) {\n                      console.log(error);\n\n                      if (error) {\n                        try {\n                          Alert.alert(\"Claim Scan\", \"Error while fetching claim. You might not have pre-reqs or claim is already issued\")[({\n                            text: \"Cancel\",\n                            onPress: function onPress() {\n                              return console.log(\"Cancel Pressed\");\n                            },\n                            style: \"cancel\"\n                          }, {\n                            text: \"OK\"\n                          })], {\n                            cancelable: \"false\"\n                          };\n                        } catch (error) {\n                          return;\n                        }\n                      }\n                    });\n                  }\n                });\n              });\n            }\n          });\n        } else if (JSON.parse(data).type == 'verifierQR') {\n          var _userAuthentication = LocalAuthentication.authenticateAsync({\n            promptMessage: \"Your Claim City claim will be shared\",\n            cancelLabel: \"Cancel\",\n            fallbackLabel: \"Use Pin\"\n          });\n\n          Promise.resolve(_userAuthentication).then(function (onTouch) {\n            if (onTouch.success == true) {\n              retrieveCityClaim().then(function (value) {\n                retreiveEthereumAddress().then(function (EthereumId) {\n                  var cityClaim = value[0];\n\n                  if (cityClaim == undefined || cityClaim == null) {\n                    try {\n                      Alert.alert(\"Claim Scan\", \"You do not have credential Claim City\")[({\n                        text: \"Cancel\",\n                        onPress: function onPress() {\n                          return console.log(\"Cancel Pressed\");\n                        },\n                        style: \"cancel\"\n                      }, {\n                        text: \"OK\"\n                      })], {\n                        cancelable: \"false\"\n                      };\n                    } catch (error) {\n                      return;\n                    }\n\n                    return;\n                  }\n\n                  verifierRoute.post('/user/cityClaim', {\n                    qr: data,\n                    claimId: cityClaim.claimId,\n                    issuer: cityClaim.issuer,\n                    claimer: EthereumId.address\n                  }, {\n                    timeout: 2000\n                  }).then(function (response) {\n                    response = JSON.parse(response.data);\n                    var claimData = {\n                      claimId: response.claimId,\n                      claimName: response.claimName,\n                      issuer: response.issuer,\n                      data: response.data,\n                      uri: response.uri,\n                      issuerName: response.issuerName\n                    };\n                    checkClaimExistance(claimData.claimId).then(function (claimExist) {\n                      if (claimExist.length == 0) {\n                        addIssuedClaims(claimData.claimId, claimData.claimName, claimData.data, claimData.issuer, claimData.uri, claimData.issuerName);\n                        navigation.navigate(\"Claims\");\n                      } else {\n                        try {\n                          Alert.alert(\"Claim Scan\", \"You already have this credential\")[({\n                            text: \"Cancel\",\n                            onPress: function onPress() {\n                              return console.log(\"Cancel Pressed\");\n                            },\n                            style: \"cancel\"\n                          }, {\n                            text: \"OK\"\n                          })], {\n                            cancelable: \"false\"\n                          };\n                        } catch (error) {\n                          console.log(error.message);\n                        }\n\n                        navigation.navigate(\"Claims\");\n                      }\n                    });\n                  }).catch(function (error) {\n                    console.log(\"stata:\", error);\n\n                    if (error.response.status == 500) {\n                      try {\n                        Alert.alert(\"Claim Scan\", \"Error while fetching claim. Check your City Claim\")[({\n                          text: \"Cancel\",\n                          onPress: function onPress() {\n                            return console.log(\"Cancel Pressed\");\n                          },\n                          style: \"cancel\"\n                        }, {\n                          text: \"OK\"\n                        })], {\n                          cancelable: \"false\"\n                        };\n                      } catch (exception) {\n                        return;\n                      }\n                    }\n                  });\n                });\n              });\n            }\n          });\n        } else if (JSON.parse(data).type == undefined) {\n          retreiveAccountInformation().then(function (value) {\n            console.log(\"Sent Username for Login:\", value.email);\n            axiosObj.post('/user/pushData', {\n              qr: data,\n              username: value.email\n            }).then(function (response) {\n              console.log(response).catch(function (error) {\n                if (error.response.status == 500) {\n                  console.log(\"Looks like you dont have an account. You need to create an account before logging in\");\n                }\n              });\n            });\n          });\n        } else {\n          console.log(\"Cannot Scan QR code\");\n        }\n      };\n\n      if (hasCameraPermission === null) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 14\n          }\n        }, \" Requesting for camera permission \");\n      }\n\n      if (hasCameraPermission === false) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 14\n          }\n        }, \" No access to camera \");\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'flex-end'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 7\n        }\n      }, React.createElement(BarCodeScanner, {\n        onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n        style: StyleSheet.absoluteFillObject,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 9\n        }\n      }), scanned && React.createElement(Button, {\n        title: 'Tap to Scan Again',\n        onPress: function onPress() {\n          return _this2.setState({\n            scanned: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }\n      }));\n    }\n  }]);\n\n  return ScanScreen;\n}(React.Component);\n\nexport { ScanScreen as default };","map":{"version":3,"sources":["/Users/muhammadtaimoor/Projects/adappt/UI/scanQRScreen.js"],"names":["React","Permissions","axios","LocalAuthentication","BarCodeScanner","retreiveAccountInformation","retreiveEthereumAddress","addIssuedClaims","retreivePersonalInformation","retrieveCityClaim","checkClaimExistance","retreiveClaims","deleteClaims","Urls","axiosObj","create","baseURL","baseUrl","verifierRoute","verifierUrl","ScanScreen","state","hasCameraPermission","scanned","getPermissionsAsync","askAsync","CAMERA","status","setState","navigation","props","handleBarCodeScanned","type","data","JSON","parse","userAuthentication","authenticateAsync","promptMessage","cancelLabel","fallbackLabel","Promise","resolve","then","onTouch","success","value","EthereumId","console","log","email","claimName","cityClaimAuthentication","onTrue","result","post","qr","country","name","phone","username","claimer","address","timeout","response","claimData","claimId","issuer","uri","issuerName","claimExist","length","navigate","Alert","alert","text","onPress","style","cancelable","error","catch","cityClaim","undefined","message","exception","flex","flexDirection","justifyContent","StyleSheet","absoluteFillObject","Component"],"mappings":"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","sourcesContent":["/*\n This file provides the functionality to perform Login, fetch credentials and get Verifier claim using QR code scan\n*/\n\nimport * as React from 'react'\nimport { Text, View, StyleSheet, Button, Alert, } from 'react-native';\nimport * as Permissions from 'expo-permissions'\nimport axios from 'axios';\nimport * as LocalAuthentication from 'expo-local-authentication'\nimport { BarCodeScanner } from 'expo-barcode-scanner'\nimport { retreiveAccountInformation } from \"../schema\"\nimport { retreiveEthereumAddress } from \"../schema\"\nimport { addIssuedClaims } from \"../schema\"\nimport { retreivePersonalInformation } from \"../schema\"\nimport { retrieveCityClaim } from \"../schema\"\nimport { checkClaimExistance } from \"../schema\"\nimport { retreiveClaims } from \"../schema\"\nimport { deleteClaims } from \"../schema\"\nimport * as Urls from '../baseUrl.json'\n\nconst axiosObj = axios.create({\n  //baseURL: 'http://172.21.5.27:3000'\n  baseURL: \"http://\" + Urls.baseUrl\n});\n\nconst verifierRoute = axios.create({\n  //baseURL: 'http://localhost:3001'\n  baseURL: \"http://\" + Urls.verifierUrl\n})\n\nexport default class ScanScreen extends React.Component {\n\n  state = {\n    hasCameraPermission: null,\n    scanned: false,\n  };\n\n\n  async componentDidMount() {\n    this.getPermissionsAsync();\n  }\n\n  getPermissionsAsync = async () => {\n    const {\n      status\n    } = await Permissions.askAsync(Permissions.CAMERA);\n    this.setState({\n      hasCameraPermission: status === 'granted'\n    });\n  };\n\n  render() {\n    const {\n      hasCameraPermission,\n      scanned\n    } = this.state;\n\n    const { navigation } = this.props;\n\n    handleBarCodeScanned = ({\n      type,\n      data\n    }) => {\n      this.setState({\n        scanned: true\n      });\n\n      if (JSON.parse(data).type == 'claimsQR') {\n        const userAuthentication = LocalAuthentication.authenticateAsync({ promptMessage: \"Claim Request\", cancelLabel: \"Cancel\", fallbackLabel: \"Use Pin\" })\n        Promise.resolve(userAuthentication).then((onTouch) => {\n          if (onTouch.success == true) {\n            retreiveAccountInformation().then((value) => {\n              retreiveEthereumAddress().then((EthereumId) => {\n                console.log(\"Sent Username for Claim Scan:\", value.email)\n                if (JSON.parse(data).claimName == \"Claim City\") {\n                  const cityClaimAuthentication = LocalAuthentication.authenticateAsync({\n                    promptMessage: \"Your Name, Email, Country and Phone will be shared for this claim\",\n                    cancelLabel: \"Cancel\", fallbackLabel: \"Use Pin\"\n                  })\n                  cityClaimAuthentication.then((onTrue) => {\n                    if (onTrue.success == true) {\n                      retreivePersonalInformation().then((result) => {\n                        axiosObj.post('/identity/issueClaim', {\n                          qr: data,\n                          country: result.country,\n                          email: result.email,\n                          name: result.name,\n                          phone: result.phone,\n                          username: value.email,\n                          claimer: EthereumId.address\n                        }, { timeout: 2000 }).then(function (response) {\n                          let claimData = {\n                            claimId: response.data.claimId,\n                            claimName: response.data.claimName,\n                            issuer: response.data.issuer,\n                            data: response.data.data,\n                            uri: response.data.uri,\n                            issuerName: response.data.issuerName\n                          }\n                          //console.log(\"Fetched City Claim Data:\",claimData)\n\n                          checkClaimExistance(claimData.claimId).then(claimExist => {\n                            if (claimExist.length == 0) {\n                              addIssuedClaims(claimData.claimId, claimData.claimName, claimData.data, claimData.issuer, claimData.uri, claimData.issuerName)\n                              navigation.navigate(\"Claims\");\n                            }\n                            else {\n                              try {\n                                Alert.alert(\"Claim Scan\",\n                                  \"You already have this credential\")\n                                [{\n                                  text: \"Cancel\",\n                                  onPress: () => console.log(\"Cancel Pressed\"),\n                                  style: \"cancel\"\n                                },\n                                  {\n                                    text: \"OK\"\n                                  }\n                                ],\n                                  { cancelable: \"false\" }\n                              }\n                              catch (error) {\n                                return\n                              }\n                              navigation.navigate(\"Claims\")\n                            }\n                          })\n\n                        })\n                          .catch(function (error) {\n                            if (error) {\n                              Alert.alert(\"Claim Scan\",\n                                \"Error while fetching claim. Do not leave your name, email, country and phone empty\")\n                              [{\n                                text: \"Cancel\",\n                                onPress: () => console.log(\"Cancel Pressed\"),\n                                style: \"cancel\"\n                              },\n                                {\n                                  text: \"OK\"\n                                }\n                              ],\n                                { cancelable: \"false\" }\n                            }\n                          });\n                      })\n                    }\n                  })\n                }\n                else {\n                  axiosObj.post('/identity/issueClaim', {\n                    qr: data,\n                    email: value.email,\n                    claimer: EthereumId.address\n                  }, { timeout: 3000 }).then(function (response) {\n                    let claimData = {\n                      claimId: response.data.claimId,\n                      claimName: response.data.claimName,\n                      issuer: response.data.issuer,\n                      data: response.data.data,\n                      uri: response.data.uri,\n                      issuerName: response.data.issuerName\n                    }\n                    //console.log(\"Fetched Claim Dataaaa:\",claimData)\n\n\n                    checkClaimExistance(claimData.claimId).then(claimExist => {\n                      if (claimExist.length == 0) {\n                        addIssuedClaims(claimData.claimId, claimData.claimName, claimData.data, claimData.issuer, claimData.uri, claimData.issuerName)\n                        navigation.navigate(\"Claims\");\n                      }\n                      else {\n                        try {\n                          Alert.alert(\"Claim Scan\",\n                            \"You already have this credential\")\n                          [{\n                            text: \"Cancel\",\n                            onPress: () => console.log(\"Cancel Pressed\"),\n                            style: \"cancel\"\n                          },\n                            {\n                              text: \"OK\"\n                            }\n                          ],\n                            { cancelable: \"false\" }\n                        }\n                        catch (error) {\n                          return\n                        }\n                        navigation.navigate(\"Claims\")\n                      }\n                    })\n\n                  })\n                    .catch(function (error) {\n                      console.log(error)\n                      if (error) {\n                        try {\n                          Alert.alert(\"Claim Scan\",\n                            \"Error while fetching claim. You might not have pre-reqs or claim is already issued\")\n                          [{\n                            text: \"Cancel\",\n                            onPress: () => console.log(\"Cancel Pressed\"),\n                            style: \"cancel\"\n                          },\n                            {\n                              text: \"OK\"\n                            }\n                          ],\n                            { cancelable: \"false\" }\n                        }\n                        catch (error) {\n                          return\n                        }\n                      }\n                    });\n                }\n              })\n            })\n          }\n        })\n      }\n      else if (JSON.parse(data).type == 'verifierQR') {\n        const userAuthentication = LocalAuthentication.authenticateAsync({ promptMessage: \"Your Claim City claim will be shared\", cancelLabel: \"Cancel\", fallbackLabel: \"Use Pin\" })\n        Promise.resolve(userAuthentication).then((onTouch) => {\n          if (onTouch.success == true) {\n            retrieveCityClaim().then((value) => {\n              retreiveEthereumAddress().then((EthereumId) => {\n                let cityClaim = value[0]\n                if (cityClaim == undefined || cityClaim == null) {\n                  try {\n                    Alert.alert(\"Claim Scan\",\n                      \"You do not have credential Claim City\")\n                    [{\n                      text: \"Cancel\",\n                      onPress: () => console.log(\"Cancel Pressed\"),\n                      style: \"cancel\"\n                    },\n                      {\n                        text: \"OK\"\n                      }\n                    ],\n                      { cancelable: \"false\" }\n                  }\n                  catch (error) {\n                    return\n                  }\n                  return\n                }\n                verifierRoute.post('/user/cityClaim', {\n                  qr: data,\n                  claimId: cityClaim.claimId,\n                  issuer: cityClaim.issuer,\n                  claimer: EthereumId.address\n                }, { timeout: 2000 }).then(function (response) {\n                  response = JSON.parse(response.data)\n\n                  let claimData = {\n                    claimId: response.claimId,\n                    claimName: response.claimName,\n                    issuer: response.issuer,\n                    data: response.data,\n                    uri: response.uri,\n                    issuerName: response.issuerName\n                  }\n\n                  checkClaimExistance(claimData.claimId).then(claimExist => {\n                    if (claimExist.length == 0) {\n                      addIssuedClaims(claimData.claimId, claimData.claimName, claimData.data, claimData.issuer, claimData.uri, claimData.issuerName)\n                      navigation.navigate(\"Claims\");\n                    }\n                    else {\n                      try {\n                        Alert.alert(\"Claim Scan\",\n                          \"You already have this credential\")\n                        [{\n                          text: \"Cancel\",\n                          onPress: () => console.log(\"Cancel Pressed\"),\n                          style: \"cancel\"\n                        },\n                          {\n                            text: \"OK\"\n                          }\n                        ],\n                          { cancelable: \"false\" }\n                      }\n                      catch (error) {\n                        console.log(error.message)\n                      }\n                      navigation.navigate(\"Claims\")\n                    }\n                  })\n\n                })\n                  .catch(function (error) {\n                    console.log(\"stata:\", error)\n                    if (error.response.status == 500) {\n                      try {\n                        Alert.alert(\"Claim Scan\",\n                          \"Error while fetching claim. Check your City Claim\")\n                        [{\n                          text: \"Cancel\",\n                          onPress: () => console.log(\"Cancel Pressed\"),\n                          style: \"cancel\"\n                        },\n                          {\n                            text: \"OK\"\n                          }\n                        ],\n                          { cancelable: \"false\" }\n                      } catch (exception) {\n                        return\n                      }\n                    }\n                  });\n              })\n            })\n          }\n        })\n\n      }\n      else if (JSON.parse(data).type == undefined) {\n        retreiveAccountInformation().then((value) => {\n          console.log(\"Sent Username for Login:\", value.email)\n          axiosObj.post('/user/pushData', {\n            qr: data,\n            username: value.email,\n          }).then(function (response) {\n            console.log(response)\n              .catch(function (error) {\n                if (error.response.status == 500) {\n                  console.log(\"Looks like you dont have an account. You need to create an account before logging in\")\n                }\n              })\n          })\n        })\n      }\n      else {\n        console.log(\"Cannot Scan QR code\")\n      }\n    }\n\n    if (hasCameraPermission === null) {\n      return <Text > Requesting for camera permission </Text>;\n    }\n    if (hasCameraPermission === false) {\n      return <Text > No access to camera </Text>;\n    }\n    return (\n      <View\n        style={{\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'flex-end',\n        }}>\n        <BarCodeScanner\n          onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n          style={StyleSheet.absoluteFillObject}\n        />\n\n        {scanned && <Button title={'Tap to Scan Again'} onPress={\n          () => this.setState({\n            scanned: false\n          })\n        } />}\n      </View>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}