{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/muhammadtaimoor/Projects/rn-onlineticket/screens/scanQRScreen.js\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nvar ScanScreen = function (_React$Component) {\n  _inherits(ScanScreen, _React$Component);\n\n  function ScanScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ScanScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScanScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hasCameraPermission: null,\n      scanned: false\n    };\n\n    _this.getPermissionsAsync = function _callee() {\n      var _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              _this.setState({\n                hasCameraPermission: status === 'granted'\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(ScanScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.getPermissionsAsync();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          hasCameraPermission = _this$state.hasCameraPermission,\n          scanned = _this$state.scanned;\n\n      handleBarCodeScanned = function (_handleBarCodeScanned) {\n        function handleBarCodeScanned(_x) {\n          return _handleBarCodeScanned.apply(this, arguments);\n        }\n\n        handleBarCodeScanned.toString = function () {\n          return _handleBarCodeScanned.toString();\n        };\n\n        return handleBarCodeScanned;\n      }(function (_ref) {\n        var type = _ref.type,\n            data = _ref.data;\n\n        _this2.setState({\n          scanned: true\n        });\n\n        if (handleBarCodeScanned) {\n          alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n\n          try {\n            fetch('http://127.0.0.1:3000/pushData', {\n              method: 'POST',\n              headers: {\n                Accept: 'appliction/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                qr: data\n              })\n            });\n          } catch (error) {\n            console.log();\n          }\n        }\n\n        ;\n      });\n\n      if (hasCameraPermission === null) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          }\n        }, \" Requesting for camera permission \");\n      }\n\n      if (hasCameraPermission === false) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          }\n        }, \" No access to camera \");\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'flex-end'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        }\n      }, React.createElement(BarCodeScanner, {\n        onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n        style: StyleSheet.absoluteFillObject,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      }), scanned && React.createElement(Button, {\n        title: 'Tap to Scan Again',\n        onPress: function onPress() {\n          return _this2.setState({\n            scanned: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        }\n      }));\n    }\n  }]);\n\n  return ScanScreen;\n}(React.Component);\n\nexport { ScanScreen as default };","map":{"version":3,"sources":["/Users/muhammadtaimoor/Projects/rn-onlineticket/screens/scanQRScreen.js"],"names":["React","Permissions","BarCodeScanner","ScanScreen","state","hasCameraPermission","scanned","getPermissionsAsync","askAsync","CAMERA","status","setState","handleBarCodeScanned","type","data","alert","fetch","method","headers","Accept","body","JSON","stringify","qr","error","console","log","flex","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject","Component"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;AAQA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,sBAA/B;;IAEqBC,U;;;;;;;;;;;;;;;UACjBC,K,GAAQ;AACJC,MAAAA,mBAAmB,EAAE,IADjB;AAEJC,MAAAA,OAAO,EAAE;AAFL,K;;UASNC,mB,GAAsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAGVN,WAAW,CAACO,QAAZ,CAAqBP,WAAW,CAACQ,MAAjC,CAHU;;AAAA;AAAA;AAElBC,cAAAA,MAFkB,yBAElBA,MAFkB;;AAIpB,oBAAKC,QAAL,CAAc;AACZN,gBAAAA,mBAAmB,EAAEK,MAAM,KAAK;AADpB,eAAd;;AAJoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;;;;;;AAHpB,mBAAKH,mBAAL;;;;;;;;;;;6BAYO;AAAA;;AAAA,wBAIH,KAAKH,KAJF;AAAA,UAELC,mBAFK,eAELA,mBAFK;AAAA,UAGLC,OAHK,eAGLA,OAHK;;AAMPM,MAAAA,oBAAoB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,QAAG,gBAGf;AAAA,YAFJC,IAEI,QAFJA,IAEI;AAAA,YADJC,IACI,QADJA,IACI;;AACJ,QAAA,MAAI,CAACH,QAAL,CAAc;AACZL,UAAAA,OAAO,EAAE;AADG,SAAd;;AAIA,YAAGM,oBAAH,EACA;AACEG,UAAAA,KAAK,yBAAuBF,IAAvB,kBAAwCC,IAAxC,wBAAL;;AACA,cAAG;AACHE,YAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,cAAAA,MAAM,EAAE,MAD8B;AAEtCC,cAAAA,OAAO,EAAG;AACRC,gBAAAA,MAAM,EAAG,iBADD;AAER,gCAAiB;AAFT,eAF4B;AAMtCC,cAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AACpBC,gBAAAA,EAAE,EAAGT;AADe,eAAf;AAN+B,aAAnC,CAAL;AAUD,WAXC,CAWD,OAAMU,KAAN,EAAa;AACZC,YAAAA,OAAO,CAACC,GAAR;AACD;AAAC;;AAAA;AACH,OAzBiB,CAApB;;AA2BA,UAAIrB,mBAAmB,KAAK,IAA5B,EAAkC;AAChC,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAP;AACD;;AACD,UAAIA,mBAAmB,KAAK,KAA5B,EAAmC;AACjC,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD;;AACD,aACI,oBAAC,IAAD;AACA,QAAA,KAAK,EAAE;AACHsB,UAAAA,IAAI,EAAE,CADH;AAEHC,UAAAA,aAAa,EAAE,QAFZ;AAGHC,UAAAA,cAAc,EAAE;AAHb,SADP;AAAA;AAAA;AAAA;AAAA;AAAA,SAMA,oBAAC,cAAD;AACI,QAAA,gBAAgB,EAAEvB,OAAO,GAAGwB,SAAH,GAAelB,oBAD5C;AAEI,QAAA,KAAK,EAAEmB,UAAU,CAACC,kBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA,QANA,EAWC1B,OAAO,IAAI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,mBAAf;AAAoC,QAAA,OAAO,EACvD;AAAA,iBAAM,MAAI,CAACK,QAAL,CAAc;AAClBL,YAAAA,OAAO,EAAE;AADS,WAAd,CAAN;AAAA,SADY;AAAA;AAAA;AAAA;AAAA;AAAA,QAXZ,CADJ;AAmBD;;;;EA7EiCN,KAAK,CAACiC,S;;SAAzB9B,U","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Button,\n  Linking\n} from 'react-native';\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default class ScanScreen extends React.Component{\n    state = {\n        hasCameraPermission: null,\n        scanned: false,\n      };\n    \n      async componentDidMount() {\n        this.getPermissionsAsync();\n      }\n    \n      getPermissionsAsync = async() => {\n        const {\n          status\n        } = await Permissions.askAsync(Permissions.CAMERA);\n        this.setState({\n          hasCameraPermission: status === 'granted'\n        });\n      };\n    \n      render() {\n        const {\n          hasCameraPermission,\n          scanned\n        } = this.state;\n\n        handleBarCodeScanned = ({\n            type,\n            data\n          }) => {\n            this.setState({\n              scanned: true\n            }); \n            \n            if(handleBarCodeScanned)\n            {\n              alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n              try{\n              fetch('http://127.0.0.1:3000/pushData', {\n                method: 'POST',\n                headers : {\n                  Accept : 'appliction/json',\n                  'Content-Type' : 'application/json',\n                },\n                body : JSON.stringify({\n                  qr : data\n                })\n              })\n            }catch(error) {\n              console.log();\n            }};\n          };\n    \n        if (hasCameraPermission === null) {\n          return <Text > Requesting for camera permission </Text>;\n        }\n        if (hasCameraPermission === false) {\n          return <Text > No access to camera </Text>;\n        }\n        return (\n            <View\n            style={{\n                flex: 1,\n                flexDirection: 'column',\n                justifyContent: 'flex-end',\n            }}>\n            <BarCodeScanner\n                onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n                style={StyleSheet.absoluteFillObject}\n            />\n\n            {scanned && <Button title={'Tap to Scan Again'} onPress = {\n            () => this.setState({\n              scanned: false\n            })\n          }/>}\n            </View>\n        );\n      }\n    }"]},"metadata":{},"sourceType":"module"}