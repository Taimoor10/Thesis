{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from 'expo-sqlite';\nexport var db = SQLite.openDatabase(\"adAppt\");\n\nexports.addPersonalInformation = function (name, email, country, phone) {\n  db.transaction(function (tx) {\n    tx.executeSql(\"create table if not exists personal_info(id integer primary key not null, name varchar, email varchar, country varchar, phone integer);\", []);\n    tx.executeSql(\"insert into personal_info(name, email, country, phone) values(?,?,?,?)\", [name, email, country, phone]);\n  });\n};\n\nexports.retreivePersonalInformation = function _callee() {\n  var response;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              tx.executeSql(\"select * from personal_info\", [], function (_, _ref) {\n                var rows = _ref.rows;\n                resolve(rows._array);\n              }, function () {\n                return console.log(\"Error while fetching Account Information\");\n              });\n            });\n          }));\n\n        case 2:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.pop());\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.addAccountInformation = function (email, address, publicKey) {\n  db.transaction(function (tx) {\n    tx.executeSql(\"create table if not exists account_info(id integer primary key not null, email varchar, address varchar, publicKey varchar);\", []);\n    tx.executeSql(\"insert into account_info(email, address, publicKey) values(?,?,?)\", [email, address, publicKey]);\n  });\n};\n\nexports.retreiveAccountInformation = function _callee2() {\n  var response;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              tx.executeSql(\"select * from account_info\", [], function (_, _ref2) {\n                var rows = _ref2.rows;\n                resolve(rows._array);\n              }, function () {\n                return console.log(\"Error while fetching Account Information\");\n              });\n            });\n          }));\n\n        case 2:\n          response = _context2.sent;\n          return _context2.abrupt(\"return\", response.pop());\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.retreiveEthereumAddress = function _callee3() {\n  var response;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              tx.executeSql(\"select address from account_info\", [], function (_, _ref3) {\n                var rows = _ref3.rows;\n                resolve(rows._array);\n              }, function () {\n                return console.log(\"Error while fetching Account Information\");\n              });\n            });\n          }));\n\n        case 2:\n          response = _context3.sent;\n          return _context3.abrupt(\"return\", response.pop());\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.deleteAccountInformation = function () {\n  db.transaction(function (tx) {\n    tx.executeSql(\"drop table account_info;\", []);\n  });\n};\n\nexports.addIssuedClaims = function (claimId, claimName, data, issuer, uri, issuerName) {\n  db.transaction(function (tx) {\n    tx.executeSql(\"create table if not exists issuedClaims(id integer primary key not null, claimId varchar, claimName varchar, data varchar, issuer varchar, uri varchar, issuerName varchar);\", []);\n    tx.executeSql(\"insert into issuedClaims(claimId, claimName, data, issuer, uri, issuerName) values(?,?,?,?,?,?)\", [claimId, claimName, data, issuer, uri, issuerName]);\n  });\n};\n\nexports.retreiveClaims = function _callee4() {\n  var response;\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            return db.transaction(function (tx) {\n              tx.executeSql(\"select * from issuedClaims\", [], function (_, _ref4) {\n                var rows = _ref4.rows;\n                resolve(rows._array);\n              }, function () {\n                return console.log(\"Error while fetching Claim Data\");\n              });\n            });\n          }));\n\n        case 2:\n          response = _context4.sent;\n          return _context4.abrupt(\"return\", response);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.retrieveCityClaim = function _callee5() {\n  var response;\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              tx.executeSql(\"select * from issuedClaims where claimName='Claim City'\", [], function (_, _ref5) {\n                var rows = _ref5.rows;\n                resolve(rows._array);\n              }, function () {\n                return console.log(\"Error while fetching City Claim\");\n              });\n            });\n          }));\n\n        case 2:\n          response = _context5.sent;\n          return _context5.abrupt(\"return\", response);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.deleteClaims = function () {\n  db.transaction(function (tx) {\n    tx.executeSql(\"delete from issuedClaims;\", []);\n  });\n};\n\nexports.checkClaimExistance = function _callee6(claimId) {\n  var response;\n  return _regeneratorRuntime.async(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            return db.transaction(function (tx) {\n              tx.executeSql(\"select * from issuedClaims where claimId='\" + claimId + \"'\", [], function (_, _ref6) {\n                var rows = _ref6.rows;\n                resolve(rows._array);\n              }, function () {\n                return console.log(\"Not Existing\");\n              });\n            });\n          }));\n\n        case 2:\n          response = _context6.sent;\n          return _context6.abrupt(\"return\", response);\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/muhammadtaimoor/Projects/adappt/schema.js"],"names":["SQLite","db","openDatabase","exports","addPersonalInformation","name","email","country","phone","transaction","tx","executeSql","retreivePersonalInformation","Promise","resolve","reject","_","rows","_array","console","log","response","pop","addAccountInformation","address","publicKey","retreiveAccountInformation","retreiveEthereumAddress","deleteAccountInformation","addIssuedClaims","claimId","claimName","data","issuer","uri","issuerName","retreiveClaims","retrieveCityClaim","deleteClaims","checkClaimExistance"],"mappings":"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","sourcesContent":["/*\nThis file provides the database schema to store and retrieve personal, account and Credential information\n*/\n\nimport * as SQLite from 'expo-sqlite'\n\nexport const db = SQLite.openDatabase(\"adAppt\")\n\nexports.addPersonalInformation = (name,email,country,phone) => {\n    db.transaction(tx => {\n        tx.executeSql(\"create table if not exists personal_info(id integer primary key not null, name varchar, email varchar, country varchar, phone integer);\",\n        []\n      );\n\n      tx.executeSql(\"insert into personal_info(name, email, country, phone) values(?,?,?,?)\",\n      [name, email, country, phone])\n    })\n}\n\nexports.retreivePersonalInformation = async() => {\n\n    let response =  await new Promise((resolve, reject) => {\n        db.transaction(tx => {\n            tx.executeSql(\"select * from personal_info\",\n            [],\n            (_,{rows}) => {\n                //setPersonalInformation(rows._array)\n                resolve(rows._array)\n            },\n            () => console.log(\"Error while fetching Account Information\"))\n        })\n\n    })\n\n    return response.pop()\n} \n\nexports.addAccountInformation = (email, address, publicKey)=> {\n    db.transaction(tx => {\n        tx.executeSql(\"create table if not exists account_info(id integer primary key not null, email varchar, address varchar, publicKey varchar);\",\n        []\n      );\n        tx.executeSql(\"insert into account_info(email, address, publicKey) values(?,?,?)\",\n        [email, address, publicKey])\n    })\n}\n\nexports.retreiveAccountInformation = async () => {\n    let response =  await new Promise((resolve, reject) => {\n        db.transaction(tx => {\n            tx.executeSql(\"select * from account_info\",\n            [],\n            (_,{rows}) => {\n                resolve(rows._array)\n            },\n            () => console.log(\"Error while fetching Account Information\"))\n        })\n    })\n\n    return response.pop();\n}\n\nexports.retreiveEthereumAddress = async () => {\n    let response =  await new Promise((resolve, reject) => {\n        db.transaction(tx => {\n            tx.executeSql(\"select address from account_info\",\n            [],\n            (_,{rows}) => {\n                resolve(rows._array)\n            },\n            () => console.log(\"Error while fetching Account Information\"))\n        })\n\n    })\n\n    return response.pop();\n}\n\nexports.deleteAccountInformation = () => {\n    db.transaction(tx => {\n        tx.executeSql(\"drop table account_info;\",\n        []\n        );\n    })\n}\n\nexports.addIssuedClaims = (claimId, claimName, data, issuer, uri, issuerName) => {\n    db.transaction(tx => {\n        tx.executeSql(\"create table if not exists issuedClaims(id integer primary key not null, claimId varchar, claimName varchar, data varchar, issuer varchar, uri varchar, issuerName varchar);\",\n        []\n      );\n\n      tx.executeSql(\"insert into issuedClaims(claimId, claimName, data, issuer, uri, issuerName) values(?,?,?,?,?,?)\",\n      [claimId, claimName, data, issuer, uri, issuerName])\n    })\n}\n\nexports.retreiveClaims = async() => {\n\n    let response =  await new Promise((resolve, reject) => \n        db.transaction(tx => {\n            tx.executeSql(\"select * from issuedClaims\",\n            [],\n            (_,{rows}) => {\n                resolve(rows._array)\n            },\n            () => console.log(\"Error while fetching Claim Data\"))\n        })\n    )\n    return response;\n}\n\nexports.retrieveCityClaim = async() => {\n\n    let response =  await new Promise((resolve, reject) => {\n        \n        db.transaction(tx => {\n            tx.executeSql(\"select * from issuedClaims where claimName='Claim City'\",\n            [],\n            (_,{rows}) => {\n                \n                resolve(rows._array)\n            },\n            () => console.log(\"Error while fetching City Claim\"))\n        })\n    })\n    return response;\n}\n\nexports.deleteClaims = () => {\n    db.transaction(tx => {\n        tx.executeSql(\"delete from issuedClaims;\",\n        []\n        );\n    })\n}\n\nexports.checkClaimExistance = async(claimId) => {\n    let response =  await new Promise((resolve, reject) => \n        db.transaction(tx => {\n            tx.executeSql(\"select * from issuedClaims where claimId='\"+claimId+\"'\",\n            [],\n            (_,{rows}) => {\n                resolve(rows._array)\n            },\n            () => console.log(\"Not Existing\"))\n        })\n    )\n    return response;\n}"]},"metadata":{},"sourceType":"module"}