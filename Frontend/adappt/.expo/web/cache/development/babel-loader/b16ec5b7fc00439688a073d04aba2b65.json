{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/muhammadtaimoor/Projects/adappt/UI/createAccount.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Button, Input } from 'react-native-elements';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { colors } from \"../colorFile\";\nimport nacl from 'tweet-nacl-react-native-expo';\nimport axios from 'axios';\nimport * as secureStore from 'expo-secure-store';\nimport * as LocalAuthentication from 'expo-local-authentication';\nimport { addTicket as _addTicket } from \"../redux\";\nimport { connect } from 'react-redux';\nimport { addAccountInformation } from \"../schema.js\";\nimport { deleteAccountInformation } from \"../schema.js\";\nimport * as Urls from \"../baseUrl.json\";\nimport { useNavigation } from '@react-navigation/native';\nvar serverPubKey = Uint8Array.from([1, 15, 187, 188, 181, 158, 112, 91, 194, 48, 25, 39, 61, 165, 191, 231, 211, 136, 140, 131, 0, 171, 34, 144, 23, 200, 86, 103, 83, 24, 58, 13]);\nvar axiosObj = axios.create({\n  baseURL: 'http:' + Urls.baseUrl\n});\nconsole.log('http://' + Urls.baseUrl);\naxios.defaults.withCredential = true;\n\nfunction CreateAccount(_ref) {\n  var addTicket = _ref.addTicket;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setEmail = _useState2[1];\n\n  var navigation = useNavigation();\n\n  decryptMessage = function decryptMessage(message, nonce, publicKey, privateKey) {\n    var decryptedAccount;\n    return _regeneratorRuntime.async(function decryptMessage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = Object.values(message);\n            nonce = Object.values(nonce);\n            decryptedAccount = nacl.box.open(Uint8Array.from(message), Uint8Array.from(nonce), publicKey, privateKey);\n            decryptedAccount = JSON.parse(nacl.util.encodeUTF8(decryptedAccount));\n            return _context.abrupt(\"return\", decryptedAccount);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  generateAlert = function generateAlert(title, message) {\n    return _regeneratorRuntime.async(function generateAlert$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            Alert.alert(title, message)[({\n              text: \"Cancel\",\n              onPress: function onPress() {\n                return console.log(\"Cancel Pressed\");\n              },\n              style: \"cancel\"\n            }, {\n              text: \"OK\"\n            })], {\n              cancelable: \"false\"\n            };\n            _context2.next = 7;\n            break;\n\n          case 4:\n            _context2.prev = 4;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\");\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  };\n\n  longPress = function longPress() {\n    return _regeneratorRuntime.async(function longPress$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"Sign Up Pressed too long\");\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  _createAccount = function _createAccount() {\n    var userAuthentication;\n    return _regeneratorRuntime.async(function _createAccount$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!(username == undefined || username == null || username == \"\")) {\n              _context6.next = 4;\n              break;\n            }\n\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(generateAlert(\"Username\", \"Username cannot be empty\"));\n\n          case 3:\n            return _context6.abrupt(\"return\");\n\n          case 4:\n            userAuthentication = LocalAuthentication.authenticateAsync({\n              promptMessage: \"Touch\",\n              cancelLabel: \"Cancel\",\n              fallbackLabel: \"Use Pin\"\n            });\n            Promise.resolve(userAuthentication).then(function (onTouch) {\n              if (onTouch.success == true) {\n                var nonce = nacl.randomBytes(24);\n                Promise.resolve(nonce).then(function (nonceValue) {\n                  var keyPair = nacl.box.keyPair(username);\n                  var userName = nacl.util.decodeUTF8(username);\n                  Promise.resolve(keyPair).then(function (value) {\n                    var encryptedMessage = nacl.box(Uint8Array.from(userName), nonceValue, serverPubKey, value.secretKey);\n                    var publicKey = nacl.box.keyPair.fromSecretKey(Uint8Array.from(value.secretKey));\n                    publicKey = publicKey.publicKey;\n                    axiosObj.post('/user/createAccount', {\n                      nonceValue: nonceValue,\n                      encryptedMessage: encryptedMessage,\n                      publicKey: publicKey\n                    }, {\n                      timeout: 50000\n                    }).then(function _callee(response) {\n                      var decryptedAccount;\n                      return _regeneratorRuntime.async(function _callee$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _context4.next = 2;\n                              return _regeneratorRuntime.awrap(decryptMessage(response.data.encryptedAccount, response.data.nonce, serverPubKey, value.secretKey));\n\n                            case 2:\n                              decryptedAccount = _context4.sent;\n                              deleteAccountInformation();\n                              addAccountInformation(username, decryptedAccount.address, decryptedAccount.publicKey);\n                              secureStore.setItemAsync(\"1234\", JSON.stringify(decryptedAccount));\n                              navigation.navigate(\"Claims\");\n\n                            case 7:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }).catch(function _callee2(error) {\n                      return _regeneratorRuntime.async(function _callee2$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              console.log(error);\n\n                              if (error.response) {\n                                _context5.next = 5;\n                                break;\n                              }\n\n                              _context5.next = 4;\n                              return _regeneratorRuntime.awrap(generateAlert(\"Create Account\", \"Cannot connect to the server at the moment\"));\n\n                            case 4:\n                              return _context5.abrupt(\"return\");\n\n                            case 5:\n                              if (!(error.response.status == 500)) {\n                                _context5.next = 8;\n                                break;\n                              }\n\n                              _context5.next = 8;\n                              return _regeneratorRuntime.awrap(generateAlert(\"Create Account\", \"Account already registered with the provided username\"));\n\n                            case 8:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    });\n                  });\n                });\n              } else if (onTouch.error == \"user_cancel\") {\n                console.log(\"Authentication Canceled\");\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread({}, styles.createAccount),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Create Account\")), React.createElement(KeyboardAvoidingView, {\n    style: {\n      flex: 1.2\n    },\n    behavior: \"padding\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, React.createElement(Input, {\n    placeholder: \"Username\",\n    placeholderTextColor: colors.black,\n    inputContainerStyle: {\n      borderBottomColor: colors.black\n    },\n    leftIconContainerStyle: {\n      marginLeft: 0,\n      marginRight: 10\n    },\n    inputStyle: {\n      color: colors.black\n    },\n    onChangeText: function onChangeText(value) {\n      return setEmail(value);\n    },\n    value: username,\n    leftIcon: React.createElement(FontAwesome, {\n      name: \"envelope\",\n      size: 18,\n      color: colors.black,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 31\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Sign Up\",\n    titleStyle: {\n      fontSize: 17\n    },\n    buttonStyle: styles.loginBtn,\n    onPress: _createAccount,\n    onLongPress: longPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: {\n      marginTop: 10,\n      alignSelf: 'center',\n      alignSelf: 'center',\n      fontSize: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \"Sign up to create an Ethereum Identity\")));\n}\n\nvar styles = StyleSheet.create({\n  page: {\n    display: 'flex',\n    flex: 1,\n    padding: 34,\n    backgroundColor: colors.purple\n  },\n  credentials: {\n    marginTop: 5,\n    paddingHorizontal: 12,\n    marginBottom: 10\n  },\n  pageLayout: {\n    backgroundColor: colors.purple,\n    width: '100%',\n    height: 100,\n    position: 'absolute',\n    paddingBottom: 0,\n    paddingTop: 10,\n    paddingLeft: 10,\n    marginTop: 0\n  },\n  formControl: {\n    paddingVertical: 30\n  },\n  loginBtn: {\n    backgroundColor: colors.grey,\n    marginTop: 20,\n    height: 45,\n    borderRadius: 10\n  },\n  password: {\n    marginVertical: 12,\n    marginHorizontal: 10,\n    alignSelf: 'flex-end',\n    color: colors.grey,\n    paddingLeft: 10\n  },\n  loginText: {\n    alignSelf: 'center',\n    color: colors.black,\n    marginTop: 20\n  },\n  createAccount: {\n    color: colors.black,\n    fontSize: 26,\n    fontWeight: 'bold'\n  }\n});\n\nvar mapDisptachToProps = function mapDisptachToProps(dispatch) {\n  return {\n    addTicket: function addTicket(ticket) {\n      return dispatch(_addTicket(ticket));\n    }\n  };\n};\n\nexport default connect(null, mapDisptachToProps)(CreateAccount);","map":{"version":3,"sources":["/Users/muhammadtaimoor/Projects/adappt/UI/createAccount.js"],"names":["React","useState","Button","Input","FontAwesome","colors","nacl","axios","secureStore","LocalAuthentication","addTicket","connect","addAccountInformation","deleteAccountInformation","Urls","useNavigation","serverPubKey","Uint8Array","from","axiosObj","create","baseURL","baseUrl","console","log","defaults","withCredential","CreateAccount","username","setEmail","navigation","decryptMessage","message","nonce","publicKey","privateKey","Object","values","decryptedAccount","box","open","JSON","parse","util","encodeUTF8","generateAlert","title","Alert","alert","text","onPress","style","cancelable","longPress","_createAccount","undefined","userAuthentication","authenticateAsync","promptMessage","cancelLabel","fallbackLabel","Promise","resolve","then","onTouch","success","randomBytes","nonceValue","keyPair","userName","decodeUTF8","value","encryptedMessage","secretKey","fromSecretKey","post","timeout","response","data","encryptedAccount","address","setItemAsync","stringify","navigate","catch","error","status","styles","page","flex","justifyContent","alignItems","createAccount","black","borderBottomColor","marginLeft","marginRight","color","fontSize","loginBtn","marginTop","alignSelf","StyleSheet","display","padding","backgroundColor","purple","credentials","paddingHorizontal","marginBottom","pageLayout","width","height","position","paddingBottom","paddingTop","paddingLeft","formControl","paddingVertical","grey","borderRadius","password","marginVertical","marginHorizontal","loginText","fontWeight","mapDisptachToProps","dispatch","ticket"],"mappings":"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","sourcesContent":["/*\nThis file provides the functionality of creation of an Ethereum account after providing a unique username\n*/\n\nimport React, { useState } from 'react';\nimport { View, Text, StyleSheet, KeyboardAvoidingView, Alert } from 'react-native';\nimport { Button, Input } from 'react-native-elements';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { colors } from '../colorFile';\nimport nacl from 'tweet-nacl-react-native-expo';\nimport axios from 'axios';\nimport * as secureStore from 'expo-secure-store';\nimport * as LocalAuthentication from 'expo-local-authentication'\nimport { addTicket } from '../redux';\nimport { connect } from 'react-redux';\nimport { addAccountInformation } from '../schema.js'\nimport { deleteAccountInformation } from '../schema.js'\nimport * as Urls from '../baseUrl.json'\n\n\nimport { useNavigation } from '@react-navigation/native';\n\nlet serverPubKey = Uint8Array.from([\n    1, 15, 187, 188, 181, 158, 112, 91,\n    194, 48, 25, 39, 61, 165, 191, 231,\n    211, 136, 140, 131, 0, 171, 34, 144,\n    23, 200, 86, 103, 83, 24, 58, 13\n])\n\nconst axiosObj = axios.create({\n    //baseURL: 'http://172.20.10.7:3000'\n    //baseURL : 'http:192.168.128.67:3000'\n    baseURL : 'http:' + Urls.baseUrl\n});\n\nconsole.log('http://' + Urls.baseUrl)\naxios.defaults.withCredential = true\n\nfunction CreateAccount({ addTicket }) {\n    const [username, setEmail] = useState('');\n\n    const navigation = useNavigation();\n\n    //Decrypt the Recieved Account information from Server\n    decryptMessage = async (message, nonce, publicKey, privateKey) => {\n        message = Object.values(message)\n        nonce = Object.values(nonce)\n        let decryptedAccount = nacl.box.open(Uint8Array.from(message), Uint8Array.from(nonce), publicKey, privateKey)\n        decryptedAccount = JSON.parse(nacl.util.encodeUTF8(decryptedAccount))\n        return decryptedAccount\n    }\n\n    //Alert Message\n    generateAlert = async (title, message) => {\n        try {\n            Alert.alert(\n                title,\n                message\n            )\n            [\n                {\n                    text: \"Cancel\",\n                    onPress: () => console.log(\"Cancel Pressed\"),\n                    style: \"cancel\"\n                },\n                {\n                    text: \"OK\"\n                }\n            ],\n                { cancelable: \"false\" }\n\n        }\n        catch (err) {\n            return\n        }\n    }\n\n    longPress = async () => {\n        console.log(\"Sign Up Pressed too long\")\n    }\n\n    _createAccount = async () => {\n        if (username == undefined || username == null || username == \"\") {\n            await generateAlert(\"Username\", \"Username cannot be empty\")\n            return\n        }\n        const userAuthentication = LocalAuthentication.authenticateAsync({ promptMessage: \"Touch\", cancelLabel: \"Cancel\", fallbackLabel: \"Use Pin\" })\n\n        Promise.resolve(userAuthentication).then((onTouch) => {\n            if (onTouch.success == true) {\n                let nonce = nacl.randomBytes(24)\n                Promise.resolve(nonce).then((nonceValue) => {\n\n                    let keyPair = nacl.box.keyPair(username);\n                    let userName = nacl.util.decodeUTF8(username)\n                    Promise.resolve(keyPair).then((value) => {\n                        const encryptedMessage = nacl.box(Uint8Array.from(userName), nonceValue,\n                            serverPubKey, value.secretKey);\n\n                        let publicKey = nacl.box.keyPair.fromSecretKey(Uint8Array.from(value.secretKey))\n                        publicKey = publicKey.publicKey\n                        \n                        \n                        axiosObj.post('/user/createAccount', {\n                            nonceValue: nonceValue,\n                            encryptedMessage: encryptedMessage,\n                            publicKey: publicKey\n                        }, { timeout: 50000 }).then(async function (response) {\n                            let decryptedAccount = await decryptMessage(response.data.encryptedAccount, response.data.nonce, serverPubKey, value.secretKey)\n\n\n                            deleteAccountInformation()\n                            addAccountInformation(username, decryptedAccount.address, decryptedAccount.publicKey)\n\n                            secureStore.setItemAsync(\"1234\", JSON.stringify(decryptedAccount))\n\n                            navigation.navigate(\"Claims\")\n\n                        }).catch(async function (error) {\n                            console.log(error)\n                            if (!error.response) {\n                                await generateAlert(\"Create Account\", \"Cannot connect to the server at the moment\")\n                                return\n                            }\n                            if (error.response.status == 500) {\n                                await generateAlert(\"Create Account\", \"Account already registered with the provided username\")\n                            }\n                        });\n                    })\n                })\n            }\n            else if (onTouch.error == \"user_cancel\") {\n                console.log(\"Authentication Canceled\")\n            }\n        })\n    }\n\n    return (\n        <View style={styles.page}>\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n                <Text style={{ ...styles.createAccount }}>Create Account</Text>\n            </View>\n            <KeyboardAvoidingView style={{ flex: 1.2 }} behavior='padding'>\n                <Input placeholder='Username'\n                    placeholderTextColor={colors.black}\n                    inputContainerStyle={{ borderBottomColor: colors.black }}\n                    leftIconContainerStyle={{ marginLeft: 0, marginRight: 10, }}\n                    inputStyle={{ color: colors.black }}\n                    onChangeText={value => setEmail(value)}\n                    value={username}\n                    leftIcon={<FontAwesome name=\"envelope\" size={18} color={colors.black} />}\n                />\n                <Button title='Sign Up'\n                    titleStyle={{ fontSize: 17, }}\n                    buttonStyle={styles.loginBtn}\n                    onPress={_createAccount}\n                    onLongPress={longPress}\n                />\n                <Text style={{ marginTop: 10, alignSelf: 'center', alignSelf: 'center', fontSize: 15 }}>Sign up to create an Ethereum Identity</Text>\n            </KeyboardAvoidingView>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    page: {\n        display: 'flex',\n        flex: 1,\n        padding: 34,\n        backgroundColor: colors.purple,\n    },\n    credentials: {\n        marginTop: 5,\n        paddingHorizontal: 12,\n        marginBottom: 10\n    },\n    pageLayout: {\n        backgroundColor: colors.purple,\n        width: '100%',\n        height: 100,\n        position: 'absolute',\n        paddingBottom: 0,\n        paddingTop: 10,\n        paddingLeft: 10,\n        marginTop: 0\n    },\n    formControl: {\n        paddingVertical: 30,\n    },\n    loginBtn: {\n        backgroundColor: colors.grey,\n        marginTop: 20,\n        height: 45,\n        borderRadius: 10\n    },\n    password: {\n        marginVertical: 12,\n        marginHorizontal: 10,\n        alignSelf: 'flex-end',\n        color: colors.grey,\n        paddingLeft: 10\n    },\n    loginText: {\n        alignSelf: 'center',\n        color: colors.black,\n        marginTop: 20\n    },\n    createAccount: {\n        color: colors.black,\n        fontSize: 26,\n        fontWeight: 'bold'\n    }\n\n});\n\n\nconst mapDisptachToProps = dispatch => {\n    return {\n        addTicket: ticket => dispatch(addTicket(ticket)),\n    }\n}\n\nexport default connect(null, mapDisptachToProps)(CreateAccount);"]},"metadata":{},"sourceType":"module"}